/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query BetSites {\n    constants {\n      betSites {\n        abbreviation\n        enumValue\n        fullImage\n        iconImage\n        id\n        isSisterSite\n        name\n        sisterSiteIds\n      }\n    }\n  }\n": types.BetSitesDocument,
    "\n  query GetGames($ids: [Guid]!, $league: LeagueEnum!) {\n    games(ids: $ids, league: $league) {\n      ... on NBAGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on NFLGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on NCAAFGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on NCAABGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on NHLGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on EuroLeagueBBGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on EUFAChampionsGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on LaLlgaGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on EnglishPremierGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on FrenchLigue1GameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on GermanBundesligaGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on ItalianSeriaAGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on MLBGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n    }\n  }\n": types.GetGamesDocument,
    "\n  subscription BetCache(\n    $league: LeagueEnum!\n    $betMarketType: BetMarketTypeEnumTypeTwo!\n  ) {\n    betCache(request: { league: $league, betMarketType: $betMarketType }) {\n      gameId\n      listings {\n        americanOdds\n        foundDateTime\n        isPrimary\n        marketId\n        selectionId\n        site {\n          abbreviation\n          enumValue\n          fullImage\n          iconImage\n          id\n          isSisterSite\n          name\n          sisterSiteIds\n        }\n        siteId\n      }\n      conditions {\n        betValue\n        betValueMax\n        marketType\n        overUnder\n        playerId\n        teamId\n      }\n    }\n  }\n": types.BetCacheDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query BetSites {\n    constants {\n      betSites {\n        abbreviation\n        enumValue\n        fullImage\n        iconImage\n        id\n        isSisterSite\n        name\n        sisterSiteIds\n      }\n    }\n  }\n"): (typeof documents)["\n  query BetSites {\n    constants {\n      betSites {\n        abbreviation\n        enumValue\n        fullImage\n        iconImage\n        id\n        isSisterSite\n        name\n        sisterSiteIds\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetGames($ids: [Guid]!, $league: LeagueEnum!) {\n    games(ids: $ids, league: $league) {\n      ... on NBAGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on NFLGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on NCAAFGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on NCAABGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on NHLGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on EuroLeagueBBGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on EUFAChampionsGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on LaLlgaGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on EnglishPremierGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on FrenchLigue1GameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on GermanBundesligaGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on ItalianSeriaAGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on MLBGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetGames($ids: [Guid]!, $league: LeagueEnum!) {\n    games(ids: $ids, league: $league) {\n      ... on NBAGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on NFLGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on NCAAFGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on NCAABGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on NHLGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on EuroLeagueBBGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on EUFAChampionsGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on LaLlgaGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on EnglishPremierGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on FrenchLigue1GameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on GermanBundesligaGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on ItalianSeriaAGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n      ... on MLBGameType {\n        id\n        awayTeamId\n        homeTeamId\n        awayTeam {\n          name\n        }\n        homeTeam {\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  subscription BetCache(\n    $league: LeagueEnum!\n    $betMarketType: BetMarketTypeEnumTypeTwo!\n  ) {\n    betCache(request: { league: $league, betMarketType: $betMarketType }) {\n      gameId\n      listings {\n        americanOdds\n        foundDateTime\n        isPrimary\n        marketId\n        selectionId\n        site {\n          abbreviation\n          enumValue\n          fullImage\n          iconImage\n          id\n          isSisterSite\n          name\n          sisterSiteIds\n        }\n        siteId\n      }\n      conditions {\n        betValue\n        betValueMax\n        marketType\n        overUnder\n        playerId\n        teamId\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription BetCache(\n    $league: LeagueEnum!\n    $betMarketType: BetMarketTypeEnumTypeTwo!\n  ) {\n    betCache(request: { league: $league, betMarketType: $betMarketType }) {\n      gameId\n      listings {\n        americanOdds\n        foundDateTime\n        isPrimary\n        marketId\n        selectionId\n        site {\n          abbreviation\n          enumValue\n          fullImage\n          iconImage\n          id\n          isSisterSite\n          name\n          sisterSiteIds\n        }\n        siteId\n      }\n      conditions {\n        betValue\n        betValueMax\n        marketType\n        overUnder\n        playerId\n        teamId\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;